import base64, codecs
magic = 'aW1wb3J0IHJlcXVlc3RzLGpzb24sdGltZSxzeXMscmFuZG9tLG9zLGFyZ3BhcnNlCmltcG9ydCBjb2xvcmFtYQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBCYWNrLCBTdHlsZQpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludApmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpjb2xvcmFtYS5pbml0KGF1dG9yZXNldD1UcnVlKQoKCgpwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcihkZXNjcmlwdGlvbj0nOTk5IERpY2UgQm90IHwgVGhpcyBJcyBHYW1ibGluZyBCb3QgUGxhc2UgVGFrZSBPd24gWW91ciBSaXNrJykKcGFyc2VyLmFkZF9hcmd1bWVudCgKICAgICctYycsJy0tYmV0c2V0JywKICAgIGRlZmF1bHQ9MCwKICAgIGhlbHA9J0VudGVyIFlvdXIgQmV0c2V0IE51bWJlciAoZGVmYXVsdDogMCknCikKbXlfbmFtZXNwYWNlID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQoKCgoKCndpdGggb3BlbignY29uZmlnLmpzb24nLCAncicpIGFzIG15ZmlsZToKICAgICAgZGF0YT1teWZpbGUucmVhZCgpCiMgcGFyc2UgZmlsZQpvYmogPSBqc29uLmxvYWRzKGRhdGEpCgoKcHJpbnQgKFN0eWxlLk5PUk1BTCtGb3JlLk1BR0VOVEErIiAgICAgIF9fXyAgXyAgICAgICAgICAgX19fICAgICAgIF9fXG4gICAgIC8gXyBcKF8pX19fX19fICAgLyBfIClfX18gIC8gL19cbiAgICAvIC8vIC8gLyBfXy8gLV8pIC8gXyAgLyBfIFwvIF9fL1xuICAgL19fX18vXy9cX18vXF9fLyAvX19fXy9cX19fL1xfXy8iK1N0eWxlLk5PUk1BTCtGb3JlLkdSRUVOKyJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuIitTdHlsZS5CUklHSFQrRm9yZS5HUkVFTisiQXV0aG9yIEJ5ICAiK1N0eWxlLkRJTStGb3JlLldISVRFKyI6ICIrU3R5bGUuUkVTRVRfQUxMKyJLYWRhbDE1XG4iK1N0eWxlLkJSSUdIVCtGb3JlLkdSRUVOKyI5OTkgRGljZSBCb3QiK1N0eWxlLk5PUk1BTCtGb3JlLldISVRFKyIgfCAiK1N0eWxlLkJSSUdIVCtGb3JlLlJFRCsiTG9zZSBTdHJlYWsgIitTdHlsZS5OT1JNQUwrRm9yZS5XSElURSsifCIrU3R5bGUuQlJJR0hUK0ZvcmUuR1JFRU4rIiBXaW4gU3RyZWFrXG4iK1N0eWxlLkJSSUdIVCtGb3JlLkdSRUVOKyJzdXBwb3J0IGJ5IGJvdGFrYmVyYW1idXQoaGlqcmFoKSBBbmQgQWxsIFRlcm11eCBJZCBNZW1iZXJcblxuIikKCmhpamF1ID0gU3R5bGUuQlJJR0hUK0ZvcmUuR1JFRU4KCnJlcyA9IFN0eWxlLlJFU0VUX0FMTAphYnUyID0gU3R5bGUuTk9STUFMK0ZvcmUuV0hJVEUKdW5ndSA9IFN0eWxlLk5PUk1BTCtGb3JlLk1BR0VOVEEKaGlqYXUyID0gU3R5bGUuTk9STUFMK0ZvcmUuR1JFRU4KcmVkMiA9IFN0eWxlLk5PUk1BTCtGb3JlLlJFRApyZWQgPSBTdHlsZS5CUklHSFQrRm9yZS5SRUQKYyA9IHJlcXVlc3RzLnNlc3Npb24oKQoKdXJsID0gImh0dHBzOi8vd3d3Ljk5OWRvZ2UuY29tL2FwaS93ZWIuYXNweCIKdWEgPSB7CiAiT3JpZ2luIjogImZpbGU6Ly8iLAogInVzZXItYWdlbnQiOiBvYmpbIlVzZXItQWdlbnQiXSwKICJDb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwKICJBY2NlcHQiOiAiKi8qIiwKICJBY2NlcHQtTGFuZ3VhZ2UiOiAiaWQtSUQsaWQ7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjciLAogIlgtUmVxdWVzdGVkLVdpdGgiOiAiY29tLnJlbGFuZC5yZWxhbmRpY2Vib3QiCn0KCmRlZiBrb252ZXJ0KHBlcnNlbix0YXJ1aGFuKToKICAgIGdsb2JhbCBoaWdoCiAgICBnbG9iYWwgbG93CiAgICBjID0gc3RyKDk5OTk5OSAqIGZsb2F0KHBlcnNlbikgLyAxMDApCiAgICBpZiB0YXJ1aGFuID09ICJIaSIgb3IgdGFydWhhbiA9PSAiaGkiIG9yIHRhcnVoYW4gPT0gIkhJIjoKICAgICAgIG4gPSBzdHIoYy5zcGxpdCgiLiIpWzFdKQogICAgICAgcGFuZ2thdCA9IDYgLSBsZW4obikKICAgICAgIGxvdyA9IGludChpbnQobikgKiAoMTAgKiogcGFuZ2thdCkpCiAgICAgICBoaWdoID0gOTk5OTk5CiAgICBpZiB0YXJ1aGFuID09ICJMbyIgb3IgdGFydWhhbiA9PSAiTE9XIiBvciB0YXJ1aGFuID09ICJsb3ciIG9yIHRhcnVoYW4gPT0gIkxvdyIgb3IgdGFydWhhbiA9PSAiTE8iOgogICAgICAgbG93ID0gMAogICAgICAgaGlnaCA9IGludChjLnNwbGl0KCIuIilbMF0pCgoKZGVmIHJldihudW0pOgogICAgaWYgKGxlbihudW0pIDwgOCk6CiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoOCAtIGxlbihudW0pKQogICAgICAgIG51bSA9ICgocGFuamFuZ19ub2wqIjAiKStzdHIobnVtKSkKICAgICAgICByZXN1bHQgPSAoIjAuIitudW0pCiAgICBpZiAobGVuKG51bSkgPT0gOCk6CiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoOCAtIGxlbihudW0pKQogICAgICAgIG51bSA9ICgocGFuamFuZ19ub2wqIjAiKStzdHIobnVtKSkKICAgICAgICByZXN1bHQgPSAoIjAuIitudW0pCiAgICBlbHNlOgogICAgICAgIGxlbl9udW0gPSBsZW4obnVtKQogICAgICAgIGVuZCA9IG51bVstODpdCiAgICAgICAgZmlyc3QgPSBudW1bOmxlbl9udW0tOF0KICAgICAgICByZXN1bHQgPSAoZmlyc3QrIi4iK2VuZCkKICAgIHJldHVybiAocmVzdWx0KQoKCmRlZiBkaWNlKHdzLGxzKToKICAgaWYgbXlfbmFtZXNwYWNlLmJldHNldCA9PSAiQXV0byIgb3IgbXlfbmFtZXNwYWNlLmJldHNldCA9PSAiYXV0byIgb3IgbXlfbmFtZXNwYWNlLmJldHNldCA9PSAiQVVUTyI6CiAgICAgIHVydXQgPSAwCiAgICAgIGp1bW'
love = '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yzVT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWHo2qaoTHvKFN9CFNvG24vVT9lVT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWHo2qaoTHvKFN9CFNvG04vVT9lVT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWHo2qaoTHvKFN9CFNvo24vBtbtVPNtVPNtVPNtVPOho19lo2kyLzI0VPf9ZDbtVPNtVPNtVPNtVPOcMvOmqTS0p19lo2kyLzI0K3qcovOcplOHpaIyBtbtVPNtVPNtVPNtVPNtVPOcMvOho19lo2kyLzI0VQ4tnJ50XT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWWMvOKnJ4vKFxtYFNkBtbtVPNtVPNtVPNtVPNtVPNtVPOlo2kyLzI0VQ0tVxkiVtbtVPNtVPNtVPNtVPNtVPOcMvOho19lo2kyLzI0VQ4tnJ50XT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWWMvOKnJ4vKFxtXvNlVP0tZGbXVPNtVPNtVPNtVPNtVPNtVPNtpz9fMJWyqPN9VPWVnFVXVPNtVPNtVPNtVPNtVPNtVPNtoz9spz9fMJWyqPN9VQNXVPNtVPNtVPNtVPNtnJLtp3EuqUAspz9fMJWyqS9fo3AyVTymVSElqJH6PvNtVPNtVPNtVPNtVPNtVTyzVT5iK3WioTIvMKDtCvOcoaDbo2WdJlWQo25znJpvKIg1paI0KIfvDzI0Vy1oVxucVP8tGT93Vy1oVxyzVRkip2HvKFxtYGRtBtbtVPNtVPNtVPNtVPNtVPNtVPOlo2kyLzI0VQ0tVxkiVtbtVPNtVPNtVPNtVPNtVPOcMvOho19lo2kyLzI0VQ4tnJ50XT9vnyfvD29hMzyaVy1oqKW1qS1oVxWyqPWqJlWVnFNiVRkiqlWqJlWWMvOZo3AyVy0cVPbtZvNgVQR6PvNtVPNtVPNtVPNtVPNtVPNtVUWioTIvMKDtCFNvFTxvPvNtVPNtVPNtVPNtVPNtVPNtVT5iK3WioTIvMKDtCFNjPvNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtpz9fMJWyqPN9VT9vnyfvD29h'
god = 'ZmlnIl1bdXJ1dF1bIkJldCJdWyJCZXQiXQogICAgICAgIGlmIG15X25hbWVzcGFjZS5iZXRzZXQgPT0gIkF1dG8iIG9yIG15X25hbWVzcGFjZS5iZXRzZXQgPT0gIkFVVE8iIG9yIG15X25hbWVzcGFjZS5iZXRzZXQgPT0gImF1dG8iOgogICAgICAgICAgd2FrdHUgPSBkYXRldGltZS5ub3coKS5zdHJmdGltZSgnJU0nKQogICAgICAgICAgaWYgaW50KHdha3R1KSA+IGludChtZW5pdCAtIDEpOgogICAgICAgICAgICAgbWVuaXQgPSBpbnQobWVuaXQpICsgaW50KG9ialsiSW50ZXJ2YWwiXSkKICAgICAgICAgICAgIHVydXQgKz0xCiAgICAgICAgICAgICBpZiB1cnV0ID09IGp1bWxhaHVsYW5nOgogICAgICAgICAgICAgICAgdXJ1dCA9IDAKICAgICAgICAgICAgIHByaW50ICgiQ2hhbmdlIEJldCBTZXQgIitvYmpbIkNvbmZpZyJdW3VydXRdWyJOYW1lIEJldCBTZXQiXSsiICAgICAgICAgICAgICAgICAgICAgICAgICAgIikKICAgICAgICAgICAgIHNscCA9IGludChvYmpbIkNvbmZpZyJdW3VydXRdWyJJbnRlcnZhbCJdKSAvIDEwMDAKICAgICAgICAgICAgIGxpbWl0X2EgPSBpbnQob2JqWyJDb25maWciXVt1cnV0XVsiUmVzZXQgSWYgV2luIl0pIC0gMQogICAgICAgICAgICAgcGF5aW4gPSBpbnQoZmxvYXQob2JqWyJDb25maWciXVt1cnV0XVsiQmFzZSBCZXQiXSkqKDEwICoqIDgpKQoKICAgICAgICBlbHNlOgogICAgICAgICAgdXJ1dCA9IGludChteV9uYW1lc3BhY2UuYmV0c2V0KQoKICAgICAgICBpZiBvYmpbIkNvbmZpZyJdW3VydXRdWyJSYW5kb20gQ2hhbmNlIl1bIlRvZ2dsZSJdID09ICJPTiIgb3Igb2JqWyJDb25maWciXVt1cnV0XVsiUmFuZG9tIENoYW5jZSJdWyJUb2dnbGUiXSA9PSAiT24iIG9yIG9ialsiQ29uZmlnIl1bdXJ1dF1bIlJhbmRvbSBDaGFuY2UiXVsiVG9nZ2xlIl0gPT0gIm9uIjoKICAgICAgICAgICBoYXNpbF9jaGFuY2UgPSByb3VuZChyYW5kb20udW5pZm9ybShmbG9hdChvYmpbIkNvbmZpZyJdW3VydXRdWyJSYW5kb20gQ2hhbmNlIl1bIk1pbiJdKSxmbG9hdChvYmpbIkNvbmZpZyJdW3VydXRdWyJSYW5kb20gQ2hhbmNlIl1bIk1heCJdKSksMikKICAgICAgICAgICBjb2sgPSBsZW4oc3RyKGhhc2lsX2NoYW5jZSkpCiAgICAgICAgICAgaWYgY29rID09IDM6CiAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXHIiK3N0cihoYXNpbF9jaGFuY2UpKyIgICAiKQogICAgICAgICAgIGlmIGNvayA9PSA0OgogICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIitzdHIoaGFzaWxfY2hhbmNlKSsiICAiKQogICAgICAgICAgIGlmIGNvayA9PSA1OgogICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIlxyIitzdHIoaGFzaWxfY2hhbmNlKSsiICIpCiAgICAgICAgICAga29udmVydChoYXNpbF9jaGFuY2Usc3RyKHJvbGViZXQpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAga29udmVydChvYmpbIkNvbmZpZyJdW3VydXRdWyJDaGFuY2UiXSxzdHIocm9sZWJldCkpCiAgICAgICAgdGltZS5zbGVlcChmbG9hdChzbHApKQogICAgICAgIGFtb3VudCA9IGludChhbW91bnQpCiAgICAgICAgbis9MQogICAgICAgIGRhdGEgPSB7CiAgICAgICAgICAiYSI6ICJQbGFjZUJldCIsCiAgICAgICAgICAicyI6IGpzWyJTZXNzaW9uQ29va2llIl0sCiAgICAgICAgICAiUGF5SW4iOiBhbW91bnQsCiAgICAgICAgICAiTG93IjogbG93LAogICAgICAgICAgIkhpZ2giOiBoaWdoLAogICAgICAgICAgIkNsaWVudFNlZWQiOiByYW5kaW50KDAsOTk5OTk5KSwKICAgICAgICAgICJDdXJyZW5jeSI6ICJkb2dlIiwKICAgICAgICAgICJQcm90b2NvbFZlcnNpb24iOiAiMiIKICAgICAgICB9CiAgICAgICAgaWYgcHJvZiA+IGZsb2F0KG9ialsiVGFyZ2V0IFByb2ZpdCJdKToKICAgICAgICAgICBwcmludCAoaGlqYXUrIlxuWWF5LiEgXG5Qcm9maXQgTWVuY2FwYWkgVGFyZ2V0Li4uLi4hXG4iK2hpamF1KyJQcm9maXQgIityZXMrc3RyKHByb2YpKQogICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICByMSA9IGMucG9zdCh1cmwsaGVhZGVycz11YSxkYXRhPWRhdGEpCiAgICAgICAganNuID0ganNvbi5sb2FkcyhyMS50ZXh0KQogICAgICAgIHByb2YgPSAoZmxvYXQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSArIGludChqc25bIlBheU91dCJdKSAtIGludChhbW91bnQpIC0ganVtYmwpLygxMCAqKiA4KSkKICAgICAgICBqdW0gPSBpbnQoanNuWyJQYXlPdXQiXSkgLSBpbnQoYW1vdW50KQogICAgICAgIGlmIGpzblsiU3RhcnRpbmdCYWxhbmNlIl0gPiB3czoKICAgICAgICAgICBwcmludCAodW5ndSsiWyIrcmVzK3N0cihyb2xlYmV0KSt1bmd1KyJdICIraGlqYXUyK3N0cihmbG9hdChhbW91bnQpLygxMCAqKiA4KSkrcmVzK3N0cihmbG9hdChpbnQoanNuWyJTdGFydGluZ0JhbGFuY2UiXSkgKyBpbnQoanVtKSkvKDEwICoqIDgpKStoaWphdTIrIlByb2ZpdCIrcmVzK3N0cihwcm9mKSkKICAgICAgICAgICBwcmludCAoaGlqYXUrIllheS4hXG5CYWxhbmNlIFN1ZGFoIE1lbWVudWhpIFRhcmdldC4uLi4uISIpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIHN5cy5leGl0KCkKICAgICAgICBpZiBqc25bIlN0YXJ0aW5nQmFsYW5jZSJdIDwgbHM6CiAgICAgICAgICAgcHJpbnQgKHVuZ3UrIlsiK3JlcytzdHIocm9sZWJldCkrdW5ndSsiXSIrcmVkMisiLSIrc3RyKGZsb2F0KGFtb3VudCkvKDEwICoqIDgpKStyZXMrc3RyKChmbG'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))

